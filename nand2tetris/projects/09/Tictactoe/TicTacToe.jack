/** 
 * Implements the tic-tac-toe
 * First the player chooses if they or the computer 
 * will go first. Then, in their turn, they choose an
 * integer from 0-8 corresponding to each section of the board.
 * The game ends when three X's or three O's are alligned horizontally,
 * vertically or diagonally
 */

 class TicTacToe {
 	field Board board;
 	field Array state;
 	field int currentPlayer, firstPlayer;
 	field AI ai;

 	/** 
 	 * Constructs new tic-tac-toe game 
     * and chooses starter player 
 	 */
 	constructor TicTacToe new() {
 		var int i;
 		var boolean error; 	
		let i = 0;
		let state = Array.new(9);
		let ai = AI.new(this);
		// clear the screen
		do clearScreen();

		// state is initially empty board
		while (i < 9) {
        	let state[i] = 95; // Unicode code for '_'
        	let i = i + 1;
		}
		// Find out who starts
		let error = true;
		while (error) {
			let currentPlayer = Keyboard.readInt("Choose who will start (1 for human, -1 for computer): ");
			if (currentPlayer = -1) {
				let error = false;
			}
			if (currentPlayer = 1) {
				let error = false;
			}
		}
 		let firstPlayer = currentPlayer;
 		do draw();
 		do Output.printString("Computer: You'll never beat me!");
 		do Output.println();

 		return this;
 	}

 	/** Disposes this game */
 	method void dispose() {
 		do state.dispose();
 		do ai.dispose();
 		do Memory.deAlloc(this);
 		return;
 	}

 	/** Draw board according to state */
	method void draw() {
		var int i, r;
		// First clear the screen
		do clearScreen();

		// Then draw board
		let i = 0;
		while (i < 9) {
			do Output.printChar(state[i]);
			// if last collumn output newline else output '|'
			let r = i + 1 - (3 * ((i +1) / 3));
			if (r = 0) {
				do Output.println();
			}
			else {
				do Output.printString("|");
			}
			let i = i + 1;
		}

		return;
	}

 	/** Runs the game until it finishes */
 	method void run() { 	
 		while (ai.finished(state) = 2) {
 			do changeState();
 			let currentPlayer = currentPlayer * -1;
 			do draw();
 		}

 		do Output.printString("Game over!");
 		do Output.println();

 		if (ai.finished(state) = 0) {
 			do Output.printString("It's a draw!");
 			do Output.println();
 			do Output.printString("Computer: That's the best possible outcome for you...");
 		}
 		else {
 			if (currentPlayer = -1) {
 				do Output.printString("Computer lost!");
 				do Output.println();
 				do Output.printString("Computer: Impossible!!!! (Literally!)");
 			}
 			else {
 				do Output.printString("Human lost!");
 				do Output.println();
 				do Output.printString("Computer: Better luck next time!");
 			}
 		}

 		return;
 	}

 	/** Change state of game according to player's choices */
 	method void changeState() {
 		var int move;
 		var boolean error;
 		let error = true;

 		if (currentPlayer = 1) {
	 		do Output.printString("It's Human's Turn");
	 		do Output.println();
	 		while (error) {
	 			let move = Keyboard.readInt("Choose index of move (0 - 8): ");
	 			if (move > 0 & move < 9 & state[move] = 95 ) {
	 				let error = false;
	 			}
	 		}
 		}
 		else {
 			do Output.printString("Computer: It's my turn! Watch me!");
 		 	do Output.println();
 		 	do Output.printString("Computer: Let me think...");
 		 	do Output.println();
 		 	let move = ai.alphaBetaSearch(state);
 		}

 		if (firstPlayer = currentPlayer) {
 			let state[move] = 88; // unicode for X
 		}
 		else {
 			let state[move] = 79; // unicode for O
 		}
 		return;
 	}

 	/** Gets currentPlayer */
 	method int currentPlayer() {
 		return currentPlayer;
 	}

 	/** Gets firstPlayer */
 	method int firstPlayer() {
 		return firstPlayer;
 	}

 	/** Clears screen */
 	method void clearScreen() {
 		do Screen.clearScreen();
		do Output.moveCursor(0, 0);
		return;
 	}
 }