/**
 * Implements that artificial intelligence that allows
 * the computer to play tic-tac-toe.
 * The computer searches for the optimal moves using
 * Min-max search with alpha-beta pruning
 */
 class AI {
 	field TicTacToe currentGame;

 	/** Construct AI with array of move values */
 	constructor AI new(TicTacToe game) {
		let currentGame = game;
		return this;
 	}

 	/** Disposes the ai */
 	method void dispose(){ 
 		do Memory.deAlloc(this);
 		return;
 	}

 	/** Search for optimal move, returns its index */
 	method int alphaBetaSearch(Array state) {
 		var int v, i, bestScore, beta, bestAction; 
 		var Array result;

 		let bestScore = -10;
 		let beta = 10;
 		let bestAction = -1;

 		let i = 0;
 		while (i < 9) {
 			if (state[i] = 95) {
 				let result = result(state, i, -1);
 				let v = minValue(result, bestScore, beta);
 				do Output.printInt(v);
 				do Output.printString(" ");
 				do result.dispose();
 				if (v > bestScore) {
 					let bestScore = v;
 					let bestAction = i;
 				}
 			}
 			let i = i + 1;
 		}
 		do Keyboard.readChar();
 		return bestAction;
 	}

 	/** Returns max value of a state */
 	method int maxValue(Array state, int alpha, int beta) {
 		var int v, i, utility;
 		var Array result;

 		let utility = finished(state) * -1;

 		if (utility > -2) {
 			return utility;
 		}

 		let v = -10;

 		let i = 0;
 		while (i < 9) {
 			if (state[i] = 95) {
 				let result = result(state, i, -1);
 				let v = Math.max(v, minValue(result, alpha, beta));
 				do result.dispose();
 				if (v > beta) {
 					return v;
 				}
 				if (v = beta) {
 					return v;
 				}
 				let alpha = Math.max(alpha, v);
 			}
 			let i = i + 1;
 		}

 		return v;
 	}

 	/** Returns min value of a state */
 	method int minValue(Array state, int alpha, int beta) {
 		var int v, i, utility;
 		var Array result;

 		let utility = finished(state) * -1;

 		if (utility > -2) {
 			return utility;
 		}

 		let v = 10;

 		let i = 0;
 		while (i < 9) {
 			if (state[i] = 95) {
 				let result = result(state, i, 1);
 				let v = Math.min(v, maxValue(result, alpha, beta));
 				do result.dispose();
 				if (v < alpha) {
 					return v;
 				}
 				if (v = alpha) {
 					return v;
 				}
 				let beta = Math.min(beta, v);
 			}
 			let i = i + 1;
 		}

 		return v;
 	}

 	/** Returs that state that results from marking board section i with player's symbol */
 	method Array result(Array state, int i, int player) {
 		var Array newState;
 		var int j;
 		let newState = Array.new(9);
 		let j = 0;
 		while (j < 9) {
 			if (j = i) {
 				if (player = currentGame.firstPlayer()) {
 					let newState[j] = 88;
 				}
 				else {
 					let newState[j] = 79;
 				}
 			}

 			else {
 				let newState[j] = state[j];
 			}

 			let j = j + 1;
 		}

 		return newState;
 	}

 	/** Checks if game is finished and returns victorious player, 0 for draws, 2 for not finished*/
 	method int finished(Array state) {
 		var int winnerSymbol, i, numOfMoves;
 		let winnerSymbol = ((checkRows(state) | checkCollums(state)) | checkDiagonals(state));

 		if (~(winnerSymbol = 0)) {
 			if (winnerSymbol = 88) {
 				if (currentGame.firstPlayer() = 1) {
 					return 1;
 				}
 				else {
 					return -1;
 				}
 			}
 			else {
 				if (currentGame.firstPlayer() = 1) {
 					return -1;
 				}
 				else {
 					return 1;
 				}
 			}
 		}

 		let i = 0;
 		let numOfMoves = 0;
 		while (i < 9) {
 			if (~(state[i] = 95)) {
 				let numOfMoves = numOfMoves + 1;
 			}
 			let i = i + 1;
 		}


 		if (numOfMoves = 9) {
 			return 0;
 		}

 		return 2;
 	}

 	/** Check for equals in rows */
 	method int checkRows(Array state) {
 		var int i;
 		let i = 0;

 		while (i < 3) {
 			if(state[3*i] = state[(3*i)+1] & state[3*i] = state[(3*i) + 2] & ~(state[3*i] = 95)) {
 				return state[3*i];
 			}
 			let i = i + 1;
 		}
 		return 0;
 	}

 	/** Check for equals in collumns */
 	method int checkCollums(Array state) {
 		var int i;
 		let i = 0;
 		while (i < 3) {
 			if (state[i] = state[i + 3] & state[i] = state[i + 6] & ~(state[i] = 95)) {
 				return state[i];
 			}
 			let i = i + 1;
 		}
 		return 0;
 	}

 	/** Check for equals in diagonals */
 	method int checkDiagonals(Array state) {
 		if (state[0] = state[4] & state[0] = state[8] & ~(state[0] = 95)) {
 			return state[0];
 		}

 		if (state[2] = state[4] & state[2] = state[6] & ~(state[2] = 95)) {
 			return state[2];
 		}
 		return 0;
 	}
 }